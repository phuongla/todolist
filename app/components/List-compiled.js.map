{"version":3,"sources":["List.js"],"names":[],"mappings":"ujBAAA,4B;AACA;;AAEA,oC;;AAEA,GAAM,QAAS,wBAAW,MAAX,CAAkB;AAC7B,UAAW;AACP,KAAM,CADC,CADkB;;AAI7B,IAAK;AACD,cAAe,KADd;AAED,eAAgB,eAFf;AAGD,WAAY,QAHX;AAID,gBAAiB,SAJhB;AAKD,OAAO,EALN;AAMD,kBAAmB,CANlB;AAOD,kBAAmB,OAPlB,CAJwB;;AAa7B,eAAgB;AACZ,cAAe,KADH;AAEZ,WAAY,QAFA;AAGZ,aAAc,EAHF,CAba;;AAkB7B,QAAS;AACL,YAAa,EADR,CAlBoB;;AAqB7B,OAAQ;AACJ,YAAa,EADT;AAEJ,aAAc,EAFV;AAGJ,MAAO,SAHH;AAIJ,SAAU,EAJN,CArBqB,CAAlB,CAAf,C;;;;AA6BqB,I;;AAEnB,cAAY,KAAZ,CAAmB;AACX,KADW;AAElB,C;;AAES,I,CAAM,C,CAAG;AACjB;AACI,iDAAM,MAAO,OAAO,GAApB;AACE,iDAAM,MAAO,OAAO,OAApB;AACG,IADH,CADF;;AAIE,iDAAM,MAAO,OAAO,cAApB;AACI,sDADJ;AAEI,6DAAkB,QAAS,yBAAM,cAAa,CAAb,CAAN,EAA3B;AACI,iDAAM,MAAO,OAAO,MAApB,WADJ,CAFJ,CAJF,CADJ;;;;;AAaD,C;;AAEQ;AACP,GAAM,IAAK,GAAI,uBAAS,UAAb,CAAwB,CAAC,cAAe,uBAAC,EAAD,CAAK,EAAL,QAAY,MAAO,EAAnB,EAAhB,CAAxB,CAAX,CADO;AAEA,KAFA,CAES,KAAK,KAFd,CAEA,KAFA;AAGP,GAAI,YAAa,GAAG,aAAH,CAAiB,KAAjB,CAAjB;;AAEA;AACI,qDAAU,MAAO,OAAO,SAAxB,CAAmC,WAAY,UAA/C;AACU,UAAW,KAAK,SAD1B;AAEU,oBAAqB,IAF/B,EADJ;;;;AAOD,C,oDAlCkB,I","file":"List-compiled.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { View, Text, ListView, StyleSheet, TouchableOpacity } from 'react-native'\n\nimport Checkbox from './Checkbox'\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1\n    },\n    row: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: '#E5F2FF',\n        height:30,\n        borderBottomWidth: 1,\n        borderBottomColor: 'white',\n    },\n    rightSelection: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingRight: 20\n    },\n    textRow: {\n        paddingLeft: 10\n    },\n    remove: {\n        paddingLeft: 10,\n        marginBottom: 10,\n        color: '#CD5C5C',\n        fontSize: 26,\n    },\n})\n\nexport default class List extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  renderRow(item, i) {\n    return (\n        <View style={styles.row}>\n          <Text style={styles.textRow}>\n            {item}\n          </Text>\n          <View style={styles.rightSelection}>\n              <Checkbox />\n              <TouchableOpacity onPress={() => onRemoveItem(i)}>\n                  <Text style={styles.remove}> &times; </Text>\n              </TouchableOpacity>\n          </View>\n        </View>\n      );\n  }\n\n  render() {\n    const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n    const {items} = this.props;\n    let dataSource = ds.cloneWithRows(items);\n\n    return (\n        <ListView style={styles.container} dataSource={dataSource}\n                  renderRow={this.renderRow}\n                  enableEmptySections={true}\n        >\n        </ListView>\n    );\n  }\n}\n"]}