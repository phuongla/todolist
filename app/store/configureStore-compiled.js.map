{"version":3,"sources":["configureStore.js"],"names":[],"mappings":"yDAAA;AACA;;;;AAIA,uC;;;;AAIA,yC;AACA,6C;;;AAGA,GAAM,YAAa,sBAAnB;;;;;AAKA,GAAI,QAAQ,GAAR,CAAY,QAAZ,GAAyB,aAA7B,CAA4C;AAC1C,WAAW,IAAX,CAAgB,2BAAhB;;AAEA,QAAQ,4BAAR;AACD,C;;;AAGc,SAAC,YAAD,CAAkB;;AAE/B,GAAM,OAAQ;;AAEZ,YAFY;AAGZ,uCAAmB,UAAnB,CAHY,CAAd;;AAKA,MAAO,MAAP;AACD,C","file":"configureStore-compiled.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { persistStore, autoRehydrate } from 'redux-persist'\n// Thunk middleware allows actions to be chained and waited on by returning\n// a function from that action\n// https://github.com/gaearon/redux-thunk\nimport thunk from 'redux-thunk'\n\n// Logs all actions going through redux into console\n// https://github.com/evgenyrodionov/redux-logger\nimport createLogger from 'redux-logger'\nimport { reducer } from '../redux/todoRedux'\n\n// http://redux.js.org/docs/advanced/Middleware.html\nconst middleware = [ thunk ]\n\n// Use the NODE_ENV to include logging and debugging tools\n// in development environment. They will be compiled out of\n// the production build.\nif (process.env.NODE_ENV === 'development') {\n  middleware.push(createLogger())\n  // Turns on Reactotron debugging tool\n  require('../config/ReactotronConfig')\n}\n\n// Can use a preloaded initialState if available, in this case we don't\nexport default (initialState) => {\n  // http://redux.js.org/docs/api/createStore.html\n  const store = createStore(\n    reducer,\n    initialState,\n    applyMiddleware(...middleware)\n  )\n  return store\n}\n"]}